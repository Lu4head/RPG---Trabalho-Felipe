
// Mapa.cpp
#include "./classes/Mapa.h"
#include "./classes/combate.h"
#include "./classes/mobs.h"
#include "./classes/item.h"
#include "./classes/equipamento.h"
#include "./classes/Personagem.h"
#include "./classes/Interface.h"
#include ".\classes\colorir.h"

#include <iostream> // Biblioteca para entrada e sa√≠da de dados
#include <cstdlib> // Biblioteca padr√£o do C++
#include <ctime> // Biblioteca para manipula√ß√£o de tempo
#include <conio.h> // Biblioteca para getch()
#include <windows.h>


#ifndef MAPA_H
#define MAPA_H
// Construtor que inicializa o mapa
Mapa::Mapa() {
    inicializar_mapa();
    posicao_x = -1;
    posicao_y = -1;
};
// Inicializa o mapa com valores iniciais
void Mapa::inicializar_mapa() {
    for (int i = 0; i < mapa_largura; ++i) {
        for (int j = 0; j < mapa_altura; ++j) {
            tamanho_mapa[i][j] = '.'; // '.' representa um espa√ßo vazio
        }
    }

    // Adiciona obst√°culos aleat√≥rios
    for (int i = 0; i < 5; ++i) { // Adiciona 5 obst√°culos
        int x = rand() % mapa_largura;
        int y = rand() % mapa_altura;

        // Garante que o obst√°culo n√£o se sobreponha ao her√≥i
        while ((x == posicao_x && y == posicao_y) || tamanho_mapa[x][y] != '.') {
            x = rand() % mapa_largura;
            y = rand() % mapa_altura;
        }

        // Seleciona um tipo de obst√°culo aleat√≥rio
        int tipo_obstaculo = rand() % 3; // 0, 1 ou 2
        if (tipo_obstaculo == 0) {
            tamanho_mapa[x][y] = '#'; // Pedra
        } else if (tipo_obstaculo == 1) {
            tamanho_mapa[x][y] = '*'; // √Årvore
        } else {
            tamanho_mapa[x][y] = '^'; // Montanha
        }
    }
}

// Coloca o her√≥i em uma posi√ß√£o espec√≠fica
void Mapa::colocar_heroi(int x, int y) {
    // Verifica se as coordenadas est√£o dentro dos limites do mapa
    if (x >= 0 && x < mapa_largura && y >= 0 && y < mapa_altura) {
        posicao_x = x;
        posicao_y = y;
        tamanho_mapa[posicao_x][posicao_y] = 'H'; // Coloca o her√≥i na posi√ß√£o especificada
    } else {
        std::cout << "Coordenadas fora dos limites do mapa." << std::endl;
    }
};



void Mapa::mostrar_mapa(Personagem& heroi) {
    Item* item_temp;
    
 
setConsoleColor(10, 0); // Texto verde
    std::cout << "==================== MAPA ====================" << std::endl;

    // Exibe o mapa
    for (int j = 0; j < mapa_altura; ++j) {
        for (int i = 0; i < mapa_largura; ++i) {
            // Verifica se a posi√ß√£o √© a do her√≥i
            if (i == posicao_x && j == posicao_y) {
                std::cout << "ü•∑"; // Representa o her√≥i
            } else if (tamanho_mapa[i][j] == '#') {
                std::cout << "ü™®"; // Representa uma pedra
            } else if (tamanho_mapa[i][j] == '*') {
                std::cout << "üå≥"; // Representa uma √°rvore
            } else if (tamanho_mapa[i][j] == '^') {
                std::cout << "‚õ∞Ô∏è"; // Representa uma montanha
            } else {
                std::cout << ". "; // Representa um espa√ßo vazio
            }
        }
        std::cout << std::endl;
    }

    interface_Status_Heroi(heroi);
};




void Mapa::mover_heroi(char direcao, Personagem& heroi) {
    // Verifica se o her√≥i est√° na posi√ß√£o v√°lida antes de mov√™-lo
    if (posicao_x >= 0 && posicao_x < mapa_largura && posicao_y >= 0 && posicao_y < mapa_altura) {
        tamanho_mapa[posicao_x][posicao_y] = '.'; // Libera a posi√ß√£o anterior
    }

    int novo_x = posicao_x;
    int novo_y = posicao_y;

    // Atualiza a posi√ß√£o do her√≥i com base na dire√ß√£o escolhida
    switch (direcao) {
        case 'w':
            novo_y--;
            break;
        case 's':
            novo_y++;
            break;
        case 'a':
            novo_x--;
            break;
        case 'd':
            novo_x++;
            break;
        default:
            std::cout << "Dire√ß√£o inv√°lida! Use 'w', 'a', 's', ou 'd' para mover." << std::endl;
            return;
    }

    // Verifica se a nova posi√ß√£o √© um obst√°culo
    if (novo_x < 0 || novo_x >= mapa_largura || novo_y < 0 || novo_y >= mapa_altura || 
        (tamanho_mapa[novo_x][novo_y] == '#' || tamanho_mapa[novo_x][novo_y] == '*' || tamanho_mapa[novo_x][novo_y] == '^')) {
        std::cout << "Voc√™ n√£o pode mover para essa posi√ß√£o, h√° um obst√°culo!" << std::endl;
        return;
    }
    // Atualiza a posi√ß√£o do her√≥i
    posicao_x = novo_x;
    posicao_y = novo_y;
    tamanho_mapa[posicao_x][posicao_y] = 'H'; // Coloca o her√≥i na nova posi√ß√£o
    // Verifica se o her√≥i chegou na √∫ltima casa do mapa
    if (posicao_x == mapa_largura - 1 && posicao_y == mapa_altura - 1) {
        std::cout << "Voc√™ chegou na √∫ltima casa! Reiniciando na posi√ß√£o inicial." << std::endl;
        posicao_x = 0; // Reinicia a posi√ß√£o X
        posicao_y = 0; // Reinicia a posi√ß√£o Y
    }

    
    std::cout << "Voc√™ se moveu para a nova posi√ß√£o: (" << posicao_x << ", " << posicao_y << ")" << std::endl;

    eventos(heroi); // Chama os eventos que podem ocorrer em cada SQM
}


void Mapa::limpar_mapa() {
    // Opcional: Limpar o mapa de volta ao estado inicial, se necess√°rio
    for (int i = 0; i < mapa_largura; ++i) {
        for (int j = 0; j < mapa_altura; ++j) {
            tamanho_mapa[j][i] ='.';
        }
    }
};




void Mapa::encotrar_itens(Personagem& heroi) { 
    // Array fixo com todos os itens dispon√≠veis
    Item** itens_sorteio = nullptr;  
    int tamanho_itens = 0;
    int nivel_heroi = heroi.get_nivel(); // Obt√©m o n√≠vel do personagem
    int escolha;
    
    // Seleciona o vetor de itens apropriado com base no n√≠vel do her√≥i
    if (nivel_heroi == 1) { 
        itens_sorteio = itens_nivel_1;
        tamanho_itens = tamanho_itens_nivel_1;
    } else if (nivel_heroi == 2) { 
        itens_sorteio = itens_nivel_2;
        tamanho_itens = tamanho_itens_nivel_2;
    } else if (nivel_heroi == 3) { 
        itens_sorteio = itens_nivel_3;
        tamanho_itens = tamanho_itens_nivel_3;
    } else if (nivel_heroi == 4){
        itens_sorteio = itens_nivel_4;
        tamanho_itens = tamanho_itens_nivel_4;
    } else if (nivel_heroi == 5){
        itens_sorteio = itens_nivel_5;
        tamanho_itens = tamanho_itens_nivel_5;
    } else if (nivel_heroi == 6){
        itens_sorteio = itens_nivel_6;
        tamanho_itens = tamanho_itens_nivel_6;
    } else if (nivel_heroi == 7){
        itens_sorteio = itens_nivel_7;
        tamanho_itens = tamanho_itens_nivel_7;
    } else if (nivel_heroi >= 8){
        itens_sorteio = itens_nivel_8;
        tamanho_itens = tamanho_itens_nivel_8;
    }

    srand(static_cast<unsigned>(time(0)));
    int indice = rand() % tamanho_itens; // Sorteia um √≠ndice para o vetor de itens
    Item* item_encontrado = itens_sorteio[indice]; // Seleciona um item aleat√≥rio do vetor

    // Apresenta o item encontrado
    colorirTexto(10); // Verde
    std::cout << "üéâ Voc√™ encontrou um(a) " << item_encontrado->get_nome() << "!" << std::endl;
    colorirTexto(7); // Branco padr√£o

    // Pergunta ao jogador se deseja pegar o item encontrado
    while (true) { 
        std::cout << "Deseja pegar? \n1. Sim \n2. N√£o" << std::endl;
        std::cin >> escolha;

        // Verifica se a entrada √© v√°lida
        if (std::cin.fail() || (escolha != 1 && escolha != 2)) {
            std::cin.clear();
            std::cin.ignore(32767, '\n');
            colorirTexto(12); // Vermelho
            std::cout << "‚ö†Ô∏è Entrada inv√°lida. Digite 1 ou 2." << std::endl;
            colorirTexto(7); // Branco padr√£o
        } else {
            break;
        }
    }

    // Se o jogador deseja pegar o item
    if (escolha == 1) {
        while (true) { // Pergunta se deseja colocar o item no cinto ou na mochila
            std::cout << "Deseja colocar o item no cinto ou na mochila? \n1. Cinto \n2. Mochila" << std::endl;
            std::cin >> escolha;

            // Verifica se a entrada √© v√°lida
            if (std::cin.fail() || (escolha != 1 && escolha != 2)) {
                std::cin.clear();
                std::cin.ignore(32767, '\n');
                colorirTexto(12); // Vermelho
                std::cout << "‚ö†Ô∏è Entrada inv√°lida. Digite 1 ou 2." << std::endl;
                colorirTexto(7); // Branco padr√£o
            } else {
                break;
            }
        }

        // Se o jogador deseja colocar o item no cinto
        if (escolha == 1) { 
            int posicao = 0;

            while (true) { // Pergunta ao jogador em qual posi√ß√£o do cinto deseja inserir o item
                std::cout << "Qual posi√ß√£o do cinto deseja inserir? (digite um n√∫mero)" << std::endl;
                std::cin >> posicao;

                // Verifica se a entrada √© v√°lida
                if (std::cin.fail()) { 
                    std::cin.clear();
                    std::cin.ignore(32767, '\n');
                    colorirTexto(12); // Vermelho
                    std::cout << "‚ö†Ô∏è Entrada inv√°lida. Por favor, digite um n√∫mero." << std::endl;
                    colorirTexto(7); // Branco padr√£o
                } else {
                    break;
                }
            }
            heroi.Inserir_cinto(item_encontrado, posicao);  // O her√≥i guarda o item no cinto
            colorirTexto(10); // Verde
            std::cout << "‚úîÔ∏è Voc√™ colocou " << item_encontrado->get_nome() << " no cinto." << std::endl;
            colorirTexto(7); // Branco padr√£o
        } 
        // Se o jogador deseja colocar o item na mochila
        else if (escolha == 2) { 
            heroi.inserir_item_mochila(item_encontrado); // O her√≥i guarda o item na mochila
            colorirTexto(10); // Verde
            std::cout << "‚úîÔ∏è Voc√™ colocou " << item_encontrado->get_nome() << " na mochila." << std::endl;
            colorirTexto(7); // Branco padr√£o
        }
    } else { // Se o jogador n√£o deseja pegar o item
        colorirTexto(14); // Amarelo
        std::cout << "‚ùå Voc√™ deixou o(a) " << item_encontrado->get_nome() << " para tr√°s." << std::endl;
        colorirTexto(7); // Branco padr√£o
    }
}


void Mapa::encontrar_monstros(Personagem& heroi) {
    // Sorteando monstro apropriado ao n√≠vel do her√≥i
    Monstro** monstros_apropriados = nullptr;
    int nivel_heroi = heroi.get_nivel(); // Supondo que Personagem tenha um m√©todo get_nivel()
    int tamanho = 0;

    // Seleciona o vetor de monstros apropriado com base no n√≠vel do her√≥i
    if (nivel_heroi == 1) {
        monstros_apropriados = monstro_nivel_1;
        tamanho = tamanho_nivel_1;
    } else if (nivel_heroi == 2) {
        monstros_apropriados = monstro_nivel_2;
        tamanho = tamanho_nivel_2;
    } else {
        colorirTexto(12); // Vermelho
        std::cout << "‚ö†Ô∏è Nenhum monstro dispon√≠vel para o seu n√≠vel." << std::endl;
        colorirTexto(7); // Branco padr√£o
        return;
    }

    srand(static_cast<unsigned>(time(0)));
    int indice = rand() % tamanho; // Sorteia um √≠ndice
    Monstro* monstro_sorteado = monstros_apropriados[indice]; // Seleciona um monstro aleat√≥rio
    
    // Mensagem de apresenta√ß√£o do monstro
    colorirTexto(10); // Verde
    std::cout << "\nüåü Um " << monstro_sorteado->exibe_nome() << " de n√≠vel " 
              << monstro_sorteado->get_nivel() << " apareceu!" << std::endl;
    colorirTexto(7); // Branco padr√£o

    // Inicia o combate
    colorirTexto(14); // Amarelo
    std::cout << "‚öîÔ∏è Preparando-se para o combate..." << std::endl;
    colorirTexto(7); // Branco padr√£o
    
    Monstro mob = *monstro_sorteado; 
    combate(heroi, mob); // Inicia o combate com o monstro sorteado
}



void Mapa::eventos(Personagem& heroi) { // Fun√ß√£o para chamar os eventos aleat√≥rios de acontecer√£o em casa SQM
    int evento = rand() % 100; // Sorteia um n√∫mero entre 0 e 99

    // Defina a chance de cada evento
    if (evento < 70) { // 70% de chance de encontrar um item
        encotrar_itens(heroi); // Chama a fun√ß√£o para encontrar itens
    } else if (evento < 90) { // 20% de chance de encontrar um monstro
        encontrar_monstros(heroi); // Chama a fun√ß√£o para encontrar monstros
    } else { // fica parado
        menu_descanso(heroi); // Chama a fun√ß√£o para exibir o menu de op√ß√µes quando o her√≥i est√° no SQM de descanso
       ;
    }

    std::cout << "Aperte uma tecla para continuar" << std::endl;
    getch();
}



void Mapa::menu_descanso(Personagem& heroi) { 
    int escolha = 0;
    Item* item_temp = nullptr;
    heroi.mostrar_item_mochila(item_temp);

    std::cout << "Um pouco de Paz" << std::endl;
     interface_descanso();
    while (true) { // Menu de op√ß√µes para o her√≥i durante o descanso
        interface_descanso();
        interface_Status_Heroi(heroi);

        std::cout << "\nO que deseja fazer:\n";
        std::cout << "1 - Trocar arma\n";
        std::cout << "2 - Usar po√ß√£o\n";
        std::cout << "3 - Gerenciar invent√°rio\n";
        std::cout << "4 - Sair\n";
        std::cout << "Escolha uma op√ß√£o: ";
        
        std::cin >> escolha;

        if (std::cin.fail()) { // Verifica se a entrada √© v√°lida
            std::cin.clear();
            std::cin.ignore(32767, '\n');
            std::cout << "‚ö†Ô∏è Entrada inv√°lida. Digite 1, 2, 3 ou 4." << std::endl;
            continue; // Volta ao in√≠cio do loop
        }

        switch (escolha) {
            case 1: { // Trocar Arma
                std::cout << "üîÑ Trocar arma" << std::endl;
                trocar_arma_menu(heroi);
                break;
            }
            case 2: { // Usar po√ß√£o
                std::cout << "üíß Utilizando po√ß√£o..." << std::endl;
                heroi.usa_pocao(); // Fun√ß√£o para usar po√ß√£o
                std::cout << "‚ù§Ô∏è Voc√™ ficou com um total de: " << heroi.exibe_vida() << " de vida!" << std::endl;
                break;
            }
            case 3: { // Gerenciar invent√°rio 
                std::cout << "üì¶ Abrindo invent√°rio..." << std::endl;
                gerenciar_iventario(heroi); // Fun√ß√£o para gerenciar o invent√°rio do her√≥i
                break;
            }
            case 4: { // Sair
                std::cout << "‚û°Ô∏è Voltando √† aventura..." << std::endl;
                return; // Sai da fun√ß√£o e retorna √† aventura
            }
            default:
                std::cout << "‚ö†Ô∏è Op√ß√£o inv√°lida. Escolha 1, 2, 3 ou 4." << std::endl;
        }
    }
}


void Mapa::gerenciar_iventario(Personagem& heroi) { 
    // Fun√ß√£o para gerenciar o invent√°rio do her√≥i durante o SQM de descanso
    int escolha = 0;
    interface_descanso(); // Exibe imagem para quando o personagem cai num SQM de descanso
    do { // Menu de op√ß√µes para gerenciar o invent√°rio
        interface_descanso(); // Exibe imagem para quando o personagem cai num SQM de descanso
        interface_Status_Heroi(heroi);

        int posicao1 = 0, posicao2 = 0;
        Item* item_temp = nullptr;

        while (true) { // Pede a escolha do jogador
            std::cout << "\nO que deseja fazer:\n";
            std::cout << "1 - Trocar posi√ß√£o no cinto\n";
            std::cout << "2 - Descartar item do cinto\n";
            std::cout << "3 - Colocar item do cinto na mochila\n";
            std::cout << "4 - Descartar item da mochila\n";
            std::cout << "5 - Sair\n";
            std::cout << "Escolha uma op√ß√£o: ";
            std::cin >> escolha;

            if (std::cin.fail()) { // Verifica se a entrada √© v√°lida
                std::cin.clear();
                std::cin.ignore(32767, '\n');
                std::cout << "‚ö†Ô∏è Entrada inv√°lida. Digite 1, 2, 3, 4 ou 5." << std::endl;
            } else {
                break;
            }
        }

        

        switch (escolha) { // Realiza a a√ß√£o escolhida pelo jogador
            case 1: { // Trocar posi√ß√£o no cinto
                while (true) { // Pede a posi√ß√£o dos itens que o jogador deseja trocar
                    std::cout << "           Itens do Cinto do Her√≥i:        " << std::endl;
                    std::cout << "-----------------------------------------------" << std::endl;
                    heroi.mostrar_cinto(); // Mostra o cinto do her√≥i
                    std::cout << "-----------------------------------------------" << std::endl;
                    std::cout << "Qual item deseja trocar? Informe a posi√ß√£o: ";
                    std::cin >> posicao1;
                    if (std::cin.fail()) { // Verifica se a entrada √© v√°lida
                        std::cin.clear();
                        std::cin.ignore(32767, '\n');
                        std::cout << "‚ö†Ô∏è Entrada inv√°lida." << std::endl;
                    } else {
                        break;
                    }
                }

                while (true) { // Pede a posi√ß√£o para colocar o item
                    std::cout << "Qual posi√ß√£o deseja colocar o item? ";
                    std::cin >> posicao2;
                    if (std::cin.fail()) { // Verifica se a entrada √© v√°lida
                        std::cin.clear();
                        std::cin.ignore(32767, '\n');
                        std::cout << "‚ö†Ô∏è Entrada inv√°lida." << std::endl;
                    } else {
                        break;
                    }
                }

                std::cout << "üîÑ Trocando o item de posi√ß√£o no cinto." << std::endl;
                heroi.Trocar_posicao_cinto(posicao1, posicao2); // Fun√ß√£o para trocar a posi√ß√£o dos itens no cinto
                break;
            }
            case 2: { // Descartar item do cinto
                while (true) { // Pede a posi√ß√£o do item que o jogador deseja remover
                    std::cout << "           Itens do Cinto do Her√≥i:        " << std::endl;
                    std::cout << "-----------------------------------------------" << std::endl;
                    heroi.mostrar_cinto(); // Mostra o cinto do her√≥i
                    std::cout << "-----------------------------------------------" << std::endl;                    std::cout << "Informe a posi√ß√£o que deseja remover do cinto: ";
                    std::cin >> posicao1;
                    if (std::cin.fail()) { // Verifica se a entrada √© v√°lida
                        std::cin.clear();
                        std::cin.ignore(32767, '\n');
                        std::cout << "‚ö†Ô∏è Entrada inv√°lida." << std::endl;
                    } else {
                        break;
                    }
                }

                heroi.Remover_cinto(item_temp, posicao1); // Fun√ß√£o para remover o item do cinto
                std::cout << "üóëÔ∏è Item descartado do cinto." << std::endl;
                break;
            }
            case 3: { // Colocar item do cinto na mochila
                    std::cout << "           Itens do Cinto do Her√≥i:        " << std::endl;
                    std::cout << "-----------------------------------------------" << std::endl;
                    heroi.mostrar_cinto(); // Mostra o cinto do her√≥i
                    std::cout << "-----------------------------------------------" << std::endl;                while (true) { // Pede a posi√ß√£o do item que o jogador deseja transferir para a mochila
                    std::cout << "Informe a posi√ß√£o do item que ser√° transferido para a mochila: ";
                    std::cin >> posicao1;
                    if (std::cin.fail()) { // Verifica se a entrada √© v√°lida
                        std::cin.clear();
                        std::cin.ignore(32767, '\n');
                        std::cout << "‚ö†Ô∏è Entrada inv√°lida." << std::endl;
                    } else {
                        break;
                    }
                }

                heroi.transfere_para_mochila(item_temp, posicao1); // Fun√ß√£o para transferir o item do cinto para a mochila
                break;
            }
            case 4: { // Descartar item da mochila
                std::cout << "Descartando o item da mochila..." << std::endl;
                heroi.retirar_item_mochila(item_temp); // Fun√ß√£o para retirar o item da mochila
                std::cout << "üóëÔ∏è Item descartado da mochila." << std::endl;
                break;
            }
            case 5: { // Sair
                std::cout << "‚û°Ô∏è Saindo do gerenciamento de invent√°rio..." << std::endl;
                break;
            }
            default:
                std::cout << "‚ö†Ô∏è Op√ß√£o inv√°lida. Escolha 1, 2, 3, 4 ou 5." << std::endl;
                break;
        }
    } while (escolha != 5);
}


// Fun√ß√£o auxiliar para trocar arma
void Mapa::trocar_arma_menu(Personagem& heroi) {
    int escolha = 0;

    // Exibe a arma que est√° atualmente equipada (na m√£o)
    if (!heroi.mostrar_arma_equipada().get_nome().empty()) {
        std::cout << "üî´ Arma atualmente equipada: " 
                  << heroi.mostrar_arma_equipada().get_nome() 
                  << " (Dano: " << heroi.mostrar_arma_equipada().get_dano() << ")"
                  << std::endl;
    } else {
        std::cout << "‚ö†Ô∏è Voc√™ n√£o tem nenhuma arma equipada." << std::endl;
    }

    // Pergunta se deseja trocar de arma
    std::cout << "Deseja trocar a arma? (1 - Sim, 2 - N√£o)" << std::endl;
    std::cin >> escolha;

    if (escolha == 1) {
        // Op√ß√£o para escolher se quer pegar uma arma do cinto ou da mochila
        while (true) {
            std::cout << "\nEscolha de onde pegar a nova arma:\n1 - Cinto\n2 - Mochila" << std::endl;
            std::cin >> escolha;

            if (escolha == 1) {
                std::cout << "üîß Exibindo armas dispon√≠veis no cinto..." << std::endl;
                // L√≥gica para trocar a arma pelo cinto
                heroi.trocar_arma();
                std::cout << "‚úÖ Nova arma equipada: " << heroi.mostrar_arma_equipada().get_nome() << std::endl;
                break; // Adicionado para sair do loop ap√≥s a troca
            } else if (escolha == 2) {
                std::cout << "üì¶ Exibindo armas dispon√≠veis na mochila..." << std::endl;
                // L√≥gica para trocar a arma pela mochila
                heroi.trocar_arma_mochila();
                std::cout << "‚úÖ Nova arma equipada: " << heroi.mostrar_arma_equipada().get_nome() << std::endl;
                break; // Adicionado para sair do loop ap√≥s a troca
            } else {
                std::cout << "‚ö†Ô∏è Escolha inv√°lida. Digite 1 ou 2." << std::endl;
            }
        }
    } else {
        std::cout << "üîí Mantendo a arma atual." << std::endl;
    }
}



#endif 